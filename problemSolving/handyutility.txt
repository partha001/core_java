// this is used to fill an array with a particular value : val
Arrays.fill(arr,val);

//to check if a character is alphabet
boolean Character.isAlphabetic(char c);

//returns the minimum value
Math.min(val1,val2);

//returns max value
Math.max(val1,val2);

//way to sort a collection in ascending order
list.sort((a,b) -> a-b);

//to generate integer within a range
Random random = new Random();
int generatedNumber = random.nextInt(range); //this is 0 inclusive and range exclusive

//string to interger
int i= Integer.parseInt("10"); //wat we do usually
int i= Integer.valueOf("10");  //this has better performance over previous


//for traversing in 4 directions 
int arrx[] = new int[]{-1,0,1,0};
int arry[] = new int[]{0,-1,0,1};
 int[][] directions = new int[][]{{0,-1},{-1,0},{0,1},{1,0}};

//for traversing in 8 directions 
int[] arri =  new int[]{0,-1,-1,-1,0,1,1,1};
int[] arrj =  new int[]{-1,-1,0,1,1,1,0,-1};
int[][] arr = new int[][]{{0,-1}{-1,-1},{-1,0},{-1,1},{0,1},{1,1},{1,0},{1,-1}};



**  it is to be noted that within a queue elements not might be in the sorted order. because the priority queue
is basically a heap. but it guarantees the order in which the elements are polled. as whenever an element is
popped . the heap will rearrge itself using heapify

//min and max heap in java
PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>();
PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Comparator.reverseOrder());
useful method in heap
add --> to add element to the queue. O(log n)
remove --> to get and remove the min/max. O(log n)
peek --> to get, but not remove the min/max. O(1)
poll --> to get and remove the min/max. O(log n)


Deque<Integer> dq = new ArrayDeque<Integer>();
important methods
peekFirst();
peekLast();
removeFirst();
removeLast();
addFirst();
addLast();


    	
//    	Set<int[]> set = new HashSet();
//    	set.add(new int[] {1,1});
//    	 System.out.println( set.contains(new int[] {1,1})); //prints false
    	
//    	 Set<Pair> set = new HashSet<Pair>();
//    	Pair<Integer, Integer> pair = new Pair(1,2);
//    	set.add(pair);
//    	System.out.println(set.contains(new Pair(1,2))); //prints true;
    	
    	 Map<Pair,Integer> map = new HashMap<Pair,Integer>();
     	Pair<Integer, Integer> pair = new Pair(1,2);
     	map.put(pair,1);
     	System.out.println(map.containsKey(new Pair(1,2))); //prints true;
    	











